// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Raven/api/controller/controller_api.proto

package controller

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OriginalImage struct {
	Image                []byte   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	CurrentLat           string   `protobuf:"bytes,2,opt,name=current_lat,json=currentLat,proto3" json:"current_lat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OriginalImage) Reset()         { *m = OriginalImage{} }
func (m *OriginalImage) String() string { return proto.CompactTextString(m) }
func (*OriginalImage) ProtoMessage()    {}
func (*OriginalImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_52a10cc858dc6c63, []int{0}
}

func (m *OriginalImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OriginalImage.Unmarshal(m, b)
}
func (m *OriginalImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OriginalImage.Marshal(b, m, deterministic)
}
func (m *OriginalImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginalImage.Merge(m, src)
}
func (m *OriginalImage) XXX_Size() int {
	return xxx_messageInfo_OriginalImage.Size(m)
}
func (m *OriginalImage) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginalImage.DiscardUnknown(m)
}

var xxx_messageInfo_OriginalImage proto.InternalMessageInfo

func (m *OriginalImage) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *OriginalImage) GetCurrentLat() string {
	if m != nil {
		return m.CurrentLat
	}
	return ""
}

type CustomImage struct {
	Image                []byte   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	AcheivedAcc          string   `protobuf:"bytes,2,opt,name=acheived_acc,json=acheivedAcc,proto3" json:"acheived_acc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomImage) Reset()         { *m = CustomImage{} }
func (m *CustomImage) String() string { return proto.CompactTextString(m) }
func (*CustomImage) ProtoMessage()    {}
func (*CustomImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_52a10cc858dc6c63, []int{1}
}

func (m *CustomImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomImage.Unmarshal(m, b)
}
func (m *CustomImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomImage.Marshal(b, m, deterministic)
}
func (m *CustomImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomImage.Merge(m, src)
}
func (m *CustomImage) XXX_Size() int {
	return xxx_messageInfo_CustomImage.Size(m)
}
func (m *CustomImage) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomImage.DiscardUnknown(m)
}

var xxx_messageInfo_CustomImage proto.InternalMessageInfo

func (m *CustomImage) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *CustomImage) GetAcheivedAcc() string {
	if m != nil {
		return m.AcheivedAcc
	}
	return ""
}

type Targets struct {
	TargetLat            string   `protobuf:"bytes,1,opt,name=target_lat,json=targetLat,proto3" json:"target_lat,omitempty"`
	TargetAcc            string   `protobuf:"bytes,2,opt,name=target_acc,json=targetAcc,proto3" json:"target_acc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Targets) Reset()         { *m = Targets{} }
func (m *Targets) String() string { return proto.CompactTextString(m) }
func (*Targets) ProtoMessage()    {}
func (*Targets) Descriptor() ([]byte, []int) {
	return fileDescriptor_52a10cc858dc6c63, []int{2}
}

func (m *Targets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Targets.Unmarshal(m, b)
}
func (m *Targets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Targets.Marshal(b, m, deterministic)
}
func (m *Targets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Targets.Merge(m, src)
}
func (m *Targets) XXX_Size() int {
	return xxx_messageInfo_Targets.Size(m)
}
func (m *Targets) XXX_DiscardUnknown() {
	xxx_messageInfo_Targets.DiscardUnknown(m)
}

var xxx_messageInfo_Targets proto.InternalMessageInfo

func (m *Targets) GetTargetLat() string {
	if m != nil {
		return m.TargetLat
	}
	return ""
}

func (m *Targets) GetTargetAcc() string {
	if m != nil {
		return m.TargetAcc
	}
	return ""
}

type Status struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_52a10cc858dc6c63, []int{3}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*OriginalImage)(nil), "controller.OriginalImage")
	proto.RegisterType((*CustomImage)(nil), "controller.CustomImage")
	proto.RegisterType((*Targets)(nil), "controller.Targets")
	proto.RegisterType((*Status)(nil), "controller.Status")
}

func init() {
	proto.RegisterFile("Raven/api/controller/controller_api.proto", fileDescriptor_52a10cc858dc6c63)
}

var fileDescriptor_52a10cc858dc6c63 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xbb, 0x82, 0xa9, 0x99, 0xd4, 0x83, 0xab, 0x68, 0x2d, 0x88, 0x31, 0xa7, 0x78, 0x49,
	0x45, 0xc1, 0xbb, 0x04, 0x2a, 0x42, 0x40, 0x48, 0xbd, 0x87, 0x71, 0x5d, 0xe2, 0x42, 0x9a, 0x84,
	0xcd, 0xa4, 0xe0, 0xbf, 0xf0, 0x27, 0x4b, 0x37, 0xab, 0x59, 0x2f, 0xbd, 0xbd, 0x7d, 0x6f, 0xf8,
	0x66, 0x78, 0x0b, 0xb7, 0x39, 0x6e, 0x65, 0xbd, 0xc4, 0x56, 0x2d, 0x45, 0x53, 0x93, 0x6e, 0xaa,
	0x4a, 0x6a, 0x47, 0x16, 0xd8, 0xaa, 0xa4, 0xd5, 0x0d, 0x35, 0x1c, 0x46, 0x37, 0x5a, 0xc1, 0xf1,
	0xab, 0x56, 0xa5, 0xaa, 0xb1, 0x7a, 0xd9, 0x60, 0x29, 0xf9, 0x19, 0x1c, 0xaa, 0x9d, 0x98, 0xb3,
	0x90, 0xc5, 0xb3, 0x7c, 0x78, 0xf0, 0x6b, 0x08, 0x44, 0xaf, 0xb5, 0xac, 0xa9, 0xa8, 0x90, 0xe6,
	0x07, 0x21, 0x8b, 0xfd, 0x1c, 0xac, 0x95, 0x21, 0x45, 0x2b, 0x08, 0xd2, 0xbe, 0xa3, 0x66, 0xb3,
	0x8f, 0x72, 0x03, 0x33, 0x14, 0x9f, 0x52, 0x6d, 0xe5, 0x47, 0x81, 0x42, 0x58, 0x4c, 0xf0, 0xeb,
	0x3d, 0x09, 0x11, 0x3d, 0xc3, 0xf4, 0x0d, 0x75, 0x29, 0xa9, 0xe3, 0x57, 0x00, 0x64, 0xa4, 0x59,
	0xc9, 0xcc, 0xac, 0x3f, 0x38, 0x19, 0x92, 0x13, 0x8f, 0x28, 0x1b, 0xef, 0x40, 0x21, 0x78, 0x6b,
	0x42, 0xea, 0x3b, 0x7e, 0x0e, 0x5e, 0x67, 0x94, 0x61, 0x1c, 0xe5, 0xf6, 0x75, 0xff, 0xcd, 0xe0,
	0x24, 0x43, 0x92, 0xb5, 0xf8, 0x4a, 0xff, 0x0a, 0xe1, 0x8f, 0xe0, 0xaf, 0x25, 0x0d, 0x37, 0xf0,
	0xd3, 0x64, 0xac, 0x2a, 0xb1, 0x77, 0x2d, 0xb8, 0x6b, 0x0e, 0x3b, 0xa2, 0x09, 0x4f, 0x61, 0x6a,
	0x29, 0xfc, 0xd2, 0x1d, 0xf8, 0xd7, 0xee, 0xe2, 0xc2, 0x8d, 0x9c, 0xc2, 0xa2, 0x49, 0xcc, 0xee,
	0xd8, 0xbb, 0x67, 0x3e, 0xe8, 0xe1, 0x27, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x89, 0xb4, 0x73, 0xcd,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LatencyControllerClient is the client API for LatencyController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LatencyControllerClient interface {
	SetTarget(ctx context.Context, in *Targets, opts ...grpc.CallOption) (*Status, error)
	Control(ctx context.Context, opts ...grpc.CallOption) (LatencyController_ControlClient, error)
}

type latencyControllerClient struct {
	cc *grpc.ClientConn
}

func NewLatencyControllerClient(cc *grpc.ClientConn) LatencyControllerClient {
	return &latencyControllerClient{cc}
}

func (c *latencyControllerClient) SetTarget(ctx context.Context, in *Targets, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/controller.LatencyController/SetTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *latencyControllerClient) Control(ctx context.Context, opts ...grpc.CallOption) (LatencyController_ControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LatencyController_serviceDesc.Streams[0], "/controller.LatencyController/Control", opts...)
	if err != nil {
		return nil, err
	}
	x := &latencyControllerControlClient{stream}
	return x, nil
}

type LatencyController_ControlClient interface {
	Send(*OriginalImage) error
	Recv() (*CustomImage, error)
	grpc.ClientStream
}

type latencyControllerControlClient struct {
	grpc.ClientStream
}

func (x *latencyControllerControlClient) Send(m *OriginalImage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *latencyControllerControlClient) Recv() (*CustomImage, error) {
	m := new(CustomImage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LatencyControllerServer is the server API for LatencyController service.
type LatencyControllerServer interface {
	SetTarget(context.Context, *Targets) (*Status, error)
	Control(LatencyController_ControlServer) error
}

func RegisterLatencyControllerServer(s *grpc.Server, srv LatencyControllerServer) {
	s.RegisterService(&_LatencyController_serviceDesc, srv)
}

func _LatencyController_SetTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Targets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LatencyControllerServer).SetTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controller.LatencyController/SetTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LatencyControllerServer).SetTarget(ctx, req.(*Targets))
	}
	return interceptor(ctx, in, info, handler)
}

func _LatencyController_Control_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LatencyControllerServer).Control(&latencyControllerControlServer{stream})
}

type LatencyController_ControlServer interface {
	Send(*CustomImage) error
	Recv() (*OriginalImage, error)
	grpc.ServerStream
}

type latencyControllerControlServer struct {
	grpc.ServerStream
}

func (x *latencyControllerControlServer) Send(m *CustomImage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *latencyControllerControlServer) Recv() (*OriginalImage, error) {
	m := new(OriginalImage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LatencyController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controller.LatencyController",
	HandlerType: (*LatencyControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTarget",
			Handler:    _LatencyController_SetTarget_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Control",
			Handler:       _LatencyController_Control_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "Raven/api/controller/controller_api.proto",
}
